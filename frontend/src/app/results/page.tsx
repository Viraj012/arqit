'use client';

import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Download } from 'lucide-react';
import MarkdownViewer from '@/components/MarkdownViewer';

interface OutputFile {
  name: string;
  content: string;
}

// Get backend URL from environment variables or use default
const BACKEND_URL = process.env.NEXT_PUBLIC_BACKEND_URL || 'http://localhost:8000';

export default function ResultsPage() {
  const router = useRouter();
  const [files, setFiles] = useState<OutputFile[]>([]);
  const [activeTab, setActiveTab] = useState(0);
  const [chatInput, setChatInput] = useState('');
  const [isLoading, setIsLoading] = useState(true);

  // Mock data for demo purposes with extended content
  useEffect(() => {
    // In a real implementation, this would fetch data from an API or get it from global state
    setTimeout(() => {
      setFiles([
        {
          name: 'plan.md',
          content: `# Project Plan

## Overview
This is a sample project plan generated by Plan AI. This plan outlines the key components, timeline, and resources needed for successful implementation.

## Goals
- Implement feature X with full functionality
- Deploy to production environment with zero downtime
- Test with users to gather feedback
- Achieve 95% test coverage
- Document all APIs and components

## Timeline
- Week 1: Research and requirements gathering
  - Market analysis
  - User interviews
  - Competitive analysis
  - Define MVP features
- Week 2: Development of core features
  - Setup development environment
  - Implement backend services
  - Create database schema
  - Build API endpoints
- Week 3: Testing and quality assurance
  - Unit testing
  - Integration testing
  - Performance testing
  - Security audit
- Week 4: Deployment and monitoring
  - Finalize deployment pipeline
  - Production deployment
  - Monitoring setup
  - Post-deployment testing

## Resources
- 2 Frontend developers
- 1 Backend developer
- 1 DevOps engineer
- 1 Product manager
- 1 Designer

## Budget
- Development: $30,000
- Infrastructure: $5,000
- Marketing: $10,000
- Contingency: $5,000

## Risk Assessment
- Limited developer availability - Medium risk
- Integration with third-party services - High risk
- Performance bottlenecks - Low risk

## Success Metrics
- User adoption rate
- Feature usage statistics
- Performance benchmarks
- Error rates`
        },
        {
          name: 'tasks.md',
          content: `# Tasks

## Research
- [ ] Analyze competitors
  - [ ] Document feature sets
  - [ ] Identify strengths and weaknesses
  - [ ] Compare pricing models
- [ ] Define requirements
  - [ ] Create user stories
  - [ ] Define acceptance criteria
  - [ ] Prioritize features
- [ ] Create mockups
  - [ ] Design wireframes
  - [ ] Create high-fidelity designs
  - [ ] Get stakeholder approval

## Development
- [ ] Set up project structure
  - [ ] Initialize repository
  - [ ] Configure build tools
  - [ ] Set up CI/CD pipeline
- [ ] Implement core features
  - [ ] User authentication
  - [ ] Data storage
  - [ ] API endpoints
  - [ ] Frontend components
- [ ] Add tests
  - [ ] Unit tests
  - [ ] Integration tests
  - [ ] End-to-end tests

## Deployment
- [ ] Configure CI/CD
  - [ ] Set up build pipeline
  - [ ] Configure deployment stages
  - [ ] Add monitoring
- [ ] Deploy to staging
  - [ ] Provision staging environment
  - [ ] Deploy application
  - [ ] Perform smoke tests
- [ ] Deploy to production
  - [ ] Provision production environment
  - [ ] Deploy application
  - [ ] Monitor performance
  - [ ] Send announcement to users`
        },
        {
          name: 'blueprint.md',
          content: `# Technical Blueprint

## Architecture
- Frontend: React with Next.js
  - State management: Redux
  - Styling: Tailwind CSS
  - Component library: shadcn/ui
- Backend: Node.js with Express
  - API style: REST
  - Authentication: JWT
  - Validation: Zod
- Database: PostgreSQL
  - ORM: Prisma
  - Migrations: handled by Prisma
- Infrastructure: AWS
  - Compute: ECS with Fargate
  - Database: RDS
  - Storage: S3
  - CDN: CloudFront

## API Endpoints
- GET /api/users - List all users
- GET /api/users/:id - Get user by ID
- POST /api/auth/login - User login
- POST /api/auth/register - User registration
- PUT /api/projects/:id - Update project
- GET /api/projects - List all projects
- GET /api/projects/:id - Get project by ID
- POST /api/projects - Create new project
- DELETE /api/projects/:id - Delete project

## Database Schema
- Users
  - id: UUID (primary key)
  - name: String
  - email: String (unique)
  - password: String (hashed)
  - created_at: Timestamp
  - updated_at: Timestamp
- Projects
  - id: UUID (primary key)
  - name: String
  - description: Text
  - user_id: UUID (foreign key to Users)
  - created_at: Timestamp
  - updated_at: Timestamp
- Tasks
  - id: UUID (primary key)
  - project_id: UUID (foreign key to Projects)
  - name: String
  - description: Text
  - status: Enum (todo, in_progress, completed)
  - due_date: Date
  - created_at: Timestamp
  - updated_at: Timestamp

## Authentication Flow
1. User submits login form
2. Backend validates credentials
3. If valid, JWT token is generated
4. Token is returned to client
5. Client stores token in localStorage
6. Token is included in Authorization header for subsequent requests

## Deployment Pipeline
1. Code is pushed to GitHub
2. GitHub Actions runs tests
3. If tests pass, build is created
4. Build is deployed to staging
5. Manual approval required for production
6. Deploy to production`
        }
      ]);
      setIsLoading(false);
    }, 1000);
  }, []);

  const handleDownload = (fileName: string, content: string) => {
    // Create a blob of the text content
    const blob = new Blob([content], { type: 'text/markdown' });
    
    // Create a URL for the blob
    const url = URL.createObjectURL(blob);
    
    // Create an anchor element and set properties
    const a = document.createElement('a');
    a.href = url;
    a.download = fileName;
    
    // Trigger a click on the anchor element
    document.body.appendChild(a);
    a.click();
    
    // Clean up
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  const handleChatSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    // Placeholder for chat functionality
    console.log(`Submitted chat for ${files[activeTab]?.name}: ${chatInput}`);
    setChatInput('');
  };

  return (
    <div className="min-h-screen bg-background">
      <div className="container mx-auto px-4 py-8">
        {/* Header with back button */}
        <div className="flex justify-between items-center mb-6">
          <Button 
            variant="ghost" 
            onClick={() => router.push('/')}
            className="hover:bg-transparent"
          >
            ‚Üê Back to Home
          </Button>
          <h1 className="text-2xl font-bold">Plan AI Results</h1>
          <div></div> {/* Empty div for flex spacing */}
        </div>

        {isLoading ? (
          <div className="flex justify-center items-center h-[70vh]">
            <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-primary"></div>
            <p className="ml-4 text-muted-foreground">Loading results...</p>
          </div>
        ) : (
          <div className="bg-white rounded-lg shadow-lg h-[calc(100vh-150px)] flex flex-col md:flex-row">
            {/* Sidebar */}
            <div className="w-full md:w-64 bg-gray-50 border-r flex-shrink-0">
              <div className="p-4">
                <h2 className="font-semibold text-lg mb-4">Files</h2>
                <div className="space-y-2">
                  {files.map((file, index) => (
                    <button
                      key={file.name}
                      className={`w-full flex justify-between items-center p-2 rounded-md ${
                        activeTab === index
                          ? 'bg-primary text-primary-foreground'
                          : 'hover:bg-gray-100'
                      }`}
                      onClick={() => setActiveTab(index)}
                    >
                      <span>{file.name}</span>
                      <Download 
                        className="h-4 w-4 cursor-pointer" 
                        onClick={(e) => {
                          e.stopPropagation();
                          handleDownload(file.name, file.content);
                        }}
                      />
                    </button>
                  ))}
                </div>
              </div>
            </div>

            {/* Main Content */}
            <div className="flex-1 flex flex-col">
              {/* File Content Area - This will take remaining height and scroll independently */}
              <div className="flex-1 overflow-auto p-6 bg-gray-100">
                {files.length > 0 && (
                  <MarkdownViewer content={files[activeTab]?.content || ''} />
                )}
              </div>

              {/* Chat Input - Fixed at bottom */}
              <div className="border-t p-4 bg-white">
                <form onSubmit={handleChatSubmit} className="flex space-x-2">
                  <Input
                    value={chatInput}
                    onChange={(e) => setChatInput(e.target.value)}
                    placeholder="Chat to edit this file..."
                    className="flex-1"
                  />
                  <Button type="submit">
                    <svg
                      xmlns="http://www.w3.org/2000/svg"
                      className="h-5 w-5"
                      viewBox="0 0 24 24"
                      fill="none"
                      stroke="currentColor"
                      strokeWidth="2"
                      strokeLinecap="round"
                      strokeLinejoin="round"
                    >
                      <path d="m22 2-7 20-4-9-9-4Z" />
                      <path d="M22 2 11 13" />
                    </svg>
                  </Button>
                </form>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}